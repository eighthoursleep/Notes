# 事件分发系统设计

## 事件系统的本质

先把某个时候要执行的方法存储到字典中，在需要执行的时候取出来执行，不再需要的时候从字典移除。

## 这样设计的作用

功能模块之间解耦，间接通信。

事件调度模块负责存储、添加、移除事件，功能模块只负责调度具体的方法。功能模块之间不直接进行沟通、交互。即一方负责存储事件，多方调度。

也可以多方存储事件、一方调度，比如网络系统负责调度派发网络事件，多个功能模块监听同一个事件。

## 如何实现

1. 数据结构：

key：任何类型、通常是int或枚举
value：List集合，每个集合里存储跟key关联的方法，这样1个key可以关联多个方法。

2. 添加事件接口：参数有key，value

3. 移除事件接口：参数key

4. 派发事件接口：参数key，方法参数

## 例子

事件存储派发基类：

```c#
using System;
using System.Collections.Generic;

public class EventBase<T,U,V> where T : new() where V : class
{
    private static T _instance;
    public static T Instance
    {
        get
        {
            if(_instance == null)
            {
                _instance = new T();
            }
            return _instance;
        }
    }

    private Dictionary<U,List<Action<V>>> _dict = new Dictionary<U, List<Action<V>>>();

    public void RegistEvent(U key,Action<V> value)
    {
        if (_dict.ContainsKey(key))
        {
            if(_dict[key] == null)
            {
                List<Action<V>> actions = new List<Action<V>>();
                _dict[key] = actions;

            }
            _dict[key].Add(value);
        }
        else
        {
            List<Action<V>> actions = new List<Action<V>>();
            actions.Add(value);
            _dict.Add(key,actions);
        }
    }

    public void RemoveEvent(U key)
    {
        if (_dict.ContainsKey(key))
        {
            if(_dict[key] != null)
            {
                _dict[key].Clear();
            }
            _dict.Remove(key);
        }
    }

    public void Dispatch(U key,V obj)
    {
        if (_dict.ContainsKey(key))
        {
            if(_dict[key] != null && _dict[key].Count > 0)
            {
                for (int i = 0; i < _dict[key].Count; i++)
                {
                    _dict[key][i](obj);
                }
            }
        }
    }
}
```

实现：

```c#
public enum UIEventEnum{
    SHOW_UI
}

public class UIEventMgr:EventBase<UIEventMgr,UIEventEnum,string>
{
    
}
```

```c#
using UnityEngine;

public class TestA : MonoBehaviour {
    
    private void OnEnable()
    {
        UIEventMgr.Instance.RegistEvent(UIEventEnum.SHOW_UI, ShowUI);
    }
    private void OnDisable()
    {
        UIEventMgr.Instance.RemoveEvent(UIEventEnum.SHOW_UI);
    }

    public void ShowUI(string obj)
    {
        Debug.Log("show ui " + obj);
    }
}
```

```c#
using UnityEngine;

public class TestB : MonoBehaviour {
    
    private void Update() {

        if (Input.GetKeyDown(KeyCode.A))
        {
            UIEventMgr.Instance.Dispatch(UIEventEnum.SHOW_UI,"666");
        }
    }
}
```